const TelegramBot = require('node-telegram-bot-api');
const tokenService = require('./services/tokenService');
const logger = require('./utils/logger');
require('dotenv').config();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const userNotifications = {};

// Start command to subscribe users
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (!userNotifications[chatId]) {
        userNotifications[chatId] = true;
        bot.sendMessage(chatId, 'You will now receive token boost notifications!');
        logger(`User ${chatId} subscribed.`);
    }
});

// Stop command to unsubscribe users
bot.onText(/\/stop/, (msg) => {
    const chatId = msg.chat.id;
    if (userNotifications[chatId]) {
        delete userNotifications[chatId]; // Remove user from notification list
        bot.sendMessage(chatId, 'You have unsubscribed from token boost notifications.');
        logger(`User ${chatId} unsubscribed.`);
    } else {
        bot.sendMessage(chatId, 'You are not subscribed to token boost notifications.');
        logger(`User ${chatId} tried to unsubscribe but was not subscribed.`);
    }
});


// Poll token boosts and notify users
const sendTokenBoostMessage = async () => {
    const tokensWithBoosts = await tokenService.getTokensWithBoosts();
    for (const token of tokensWithBoosts) {
        const message = `New token boost for ${token.description} (${token.totalAmount})`;
        Object.keys(userNotifications).forEach(chatId => bot.sendMessage(chatId, message));
    }
};

const monitorBoosts = async () => {
    while (true) {
        await sendTokenBoostMessage();
        await new Promise(resolve => setTimeout(resolve, 10000)); // 10 sec interval
    }
};

monitorBoosts();
